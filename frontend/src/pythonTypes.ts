/* 
 * This file is generated by ../backend/generate_types.py
 * Do not edit this file manually!
 */
export interface SerializedProgressState {
	progress: "COMPLETED" | "EARLY_IMPORTING" | "GROUPING_ALBUMS" | "IDENTIFYING_DUPLICATES" | "IMPORTING" | "LOOKING_UP_CANDIDATES" | "MANIPULATING_FILES" | "MATCH_THRESHOLD" | "NOT_STARTED" | "OFFERING_MATCHES" | "READING_FILES" | "WAITING_FOR_USER_SELECTION";
	message: null | string;
	plugin_name: null | string;
}

export interface TrackInfo {
	type: "album" | "item" | "track";
	artist: null | string;
	album: null | string;
	data_url: null | string;
	data_source: null | string;
	year: null | number;
	genre: null | string;
	media: null | string;
	title: null | string;
	length: null | number;
	isrc: null | string;
	index: null | number;
}

export interface ItemInfo {
	type: "album" | "item" | "track";
	artist: null | string;
	album: null | string;
	data_url: null | string;
	data_source: null | string;
	year: null | number;
	genre: null | string;
	media: null | string;
	title: null | string;
	length: null | number;
	isrc: null | string;
	track: null | number;
	path: null | string;
	bitrate: null | number;
	format: null | string;
}

export interface AlbumInfo {
	type: "album" | "item" | "track";
	artist: null | string;
	album: null | string;
	data_url: null | string;
	data_source: null | string;
	year: null | number;
	genre: null | string;
	media: null | string;
	mediums: null | number;
	country: null | string;
	label: null | string;
	catalognum: null | string;
	albumdisambig: null | string;
}

export interface SerializedCandidateState {
	id: string;
	diff_preview: null | string;
	cur_artist: string;
	cur_album: string;
	penalties: Array<string>;
	duplicate_in_library: boolean;
	type: string;
	distance: number;
	info: AlbumInfo | ItemInfo | TrackInfo;
	items: Array<AlbumInfo | ItemInfo | TrackInfo> | null;
	tracks: Array<TrackInfo> | null;
	extra_tracks: Array<TrackInfo> | null;
	extra_items: Array<AlbumInfo | ItemInfo | TrackInfo> | null;
	mapping: Record<number, number> | null;
}

export interface SerializedTaskState {
	id: string;
	candidates: Array<SerializedCandidateState>;
	current_candidate_id: null | string;
	duplicate_action: null | string;
	items: Array<AlbumInfo | ItemInfo | TrackInfo>;
	completed: boolean;
	toppath: null | string;
	paths: Array<string>;
}

export interface SerializedSessionState {
	id: string;
	tasks: Array<SerializedTaskState>;
	status: SerializedProgressState;
	completed: boolean;
}

export enum FolderStatus {
	UNKNOWN = -2,
	FAILED = -1,
	NOT_STARTED = 0,
	PENDING = 1,
	RUNNING = 2,
	TAGGED = 3,
	IMPORTED = 4,
}

export interface FolderStatusResponse {
	path: string;
	hash: string;
	status: FolderStatus;
}

export interface File {
	type: "file";
	full_path: string;
}

export interface Folder {
	type: "directory";
	children: Array<File | Folder>;
	full_path: string;
	hash: string;
	is_album: boolean;
}

export interface ItemResponseMinimal {
	id: number;
	name: string;
	path: string;
	artist: string;
	year: number;
	album: string;
	albumartist: string;
	album_id: number;
	isrc?: string;
	size: number;
}

export interface AlbumResponseMinimalExpanded {
	id: number;
	name: string;
	path: string;
	albumartist: string;
	year: number;
	items: Array<ItemResponseMinimal>;
}

export interface AlbumResponseMinimal {
	id: number;
	name: string;
	path: string;
	albumartist: string;
	year: number;
}

export interface ItemSource {
	source: string;
	track_id: string;
	album_id?: string;
	artist_id?: string;
	extra?: Record<string, Array<string> | string>;
}

export interface ItemResponse {
	id: number;
	name: string;
	path: string;
	artist: string;
	year: number;
	album: string;
	albumartist: string;
	album_id: number;
	isrc?: string;
	size: number;
	genre: string;
	label: string;
	samplerate: number;
	bitrate: number;
	bpm: number;
	bitdepth: number;
	channels: number;
	format: string;
	encoder_info: string;
	encoder_settings: string;
	initial_key: string;
	length: number;
	track: number;
	tracktotal: number;
	added: number;
	catalognum: string;
	sources: Array<ItemSource>;
}

export interface AlbumResponseExpanded {
	id: number;
	name: string;
	path: string;
	albumartist: string;
	year: number;
	items: Array<ItemResponse>;
}

export interface AlbumSource {
	source: string;
	album_id: string;
	artist_id?: string;
	extra?: Record<string, string>;
}

export interface AlbumResponse {
	id: number;
	name: string;
	path: string;
	albumartist: string;
	year: number;
	genre: string;
	label: string;
	sources: Array<AlbumSource>;
}

